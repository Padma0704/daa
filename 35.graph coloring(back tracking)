#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100

// Function to print the color assignment
void printColors(int color[], int n) {
    printf("Color assignment:\n");
    for (int i = 0; i < n; i++) {
        printf("Vertex %d -> Color %d\n", i, color[i]);
    }
}

// Function to check if the current color assignment is safe
bool isSafe(int graph[MAX_VERTICES][MAX_VERTICES], int color[], int vertex, int c, int n) {
    for (int i = 0; i < n; i++) {
        if (graph[vertex][i] && color[i] == c) {
            return false;
        }
    }
    return true;
}

// Recursive function to solve the graph coloring problem
bool graphColoringUtil(int graph[MAX_VERTICES][MAX_VERTICES], int color[], int vertex, int m, int n) {
    // If all vertices are assigned a color, return true
    if (vertex == n) {
        return true;
    }

    // Try different colors for the vertex
    for (int c = 1; c <= m; c++) {
        // Check if assignment of color c to vertex is safe
        if (isSafe(graph, color, vertex, c, n)) {
            color[vertex] = c;

            // Recur to assign colors to the rest of the vertices
            if (graphColoringUtil(graph, color, vertex + 1, m, n)) {
                return true;
            }

            // If assigning color c doesn't lead to a solution, remove it (backtrack)
            color[vertex] = 0;
        }
    }

    return false;
}

// Function to solve the graph coloring problem
void graphColoring(int graph[MAX_VERTICES][MAX_VERTICES], int n, int m) {
    int color[MAX_VERTICES] = {0}; // Array to store color assignment

    if (graphColoringUtil(graph, color, 0, m, n)) {
        printColors(color, n);
    } else {
        printf("Solution does not exist with %d colors.\n", m);
    }
}

int main() {
    int graph[MAX_VERTICES][MAX_VERTICES];
    int n, m;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the number of colors: ");
    scanf("%d", &m);

    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    graphColoring(graph, n, m);

    return 0;
}

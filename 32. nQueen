#include <stdio.h>
#include <stdbool.h>

#define MAX 20

// Function to print the chessboard
void printSolution(int board[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == 1)
                printf(" Q ");
            else
                printf(" . ");
        }
        printf("\n");
    }
}

// Function to check if a queen can be placed on board[row][col]
bool isSafe(int board[MAX][MAX], int row, int col, int n) {
    // Check this row on left side
    for (int i = 0; i < col; i++)
        if (board[row][i])
            return false;

    // Check upper diagonal on left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    // Check lower diagonal on left side
    for (int i = row, j = col; j >= 0 && i < n; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

// Function to solve the N-Queens problem using backtracking
bool solveNQueens(int board[MAX][MAX], int col, int n) {
    if (col >= n)
        return true;

    for (int i = 0; i < n; i++) {
        if (isSafe(board, i, col, n)) {
            board[i][col] = 1; // Place queen

            if (solveNQueens(board, col + 1, n))
                return true;

            board[i][col] = 0; // Remove queen (backtrack)
        }
    }

    return false;
}

// Function to initialize the board and start solving
void solveNQueensProblem(int n) {
    int board[MAX][MAX] = {0}; // Initialize the board

    if (solveNQueens(board, 0, n)) {
        printf("Solution:\n");
        printSolution(board, n);
    } else {
        printf("Solution does not exist.\n");
    }
}

int main() {
    int n;

    printf("Enter the number of queens (N): ");
    scanf("%d", &n);

    if (n <= 0 || n > MAX) {
        printf("Invalid number of queens. Please enter a number between 1 and %d.\n", MAX);
        return 1;
    }

    solveNQueensProblem(n);

    return 0;
}

#include <stdio.h>
#include <stdlib.h>

// Structure to represent an edge
typedef struct {
    int src, dest, weight;
} Edge;

// Structure to represent a subset for Union-Find
typedef struct {
    int parent;
    int rank;
} Subset;

// Function to find the parent of a node using path compression
int find(Subset subsets[], int i) {
    if (subsets[i].parent != i) {
        subsets[i].parent = find(subsets, subsets[i].parent);
    }
    return subsets[i].parent;
}

// Function to union two subsets by rank
void unionByRank(Subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (xroot != yroot) {
        if (subsets[xroot].rank < subsets[yroot].rank) {
            subsets[xroot].parent = yroot;
        } else if (subsets[xroot].rank > subsets[yroot].rank) {
            subsets[yroot].parent = xroot;
        } else {
            subsets[yroot].parent = xroot;
            subsets[xroot].rank++;
        }
    }
}

// Comparison function to sort edges based on their weight
int compare(const void *a, const void *b) {
    Edge *edgeA = (Edge *)a;
    Edge *edgeB = (Edge *)b;
    return edgeA->weight - edgeB->weight;
}

// Function to implement Kruskal's algorithm
void kruskalMST(Edge edges[], int V, int E) {
    Edge result[V]; // To store the resultant MST
    int e = 0; // Count of edges in MST
    int i = 0; // Initial index of sorted edges

    // Sort edges based on weight
    qsort(edges, E, sizeof(edges[0]), compare);

    // Create V subsets with single elements
    Subset *subsets = (Subset *)malloc(V * sizeof(Subset));
    for (int v = 0; v < V; ++v) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    // Process edges in sorted order
    while (e < V - 1) {
        // Pick the smallest edge
        Edge nextEdge = edges[i++];

        int x = find(subsets, nextEdge.src);
        int y = find(subsets, nextEdge.dest);

        // If including this edge does not cause a cycle
        if (x != y) {
            result[e++] = nextEdge;
            unionByRank(subsets, x, y);
        }
    }

    // Print the resultant MST
    printf("Edges in the Minimum Spanning Tree:\n");
    int mstWeight = 0;
    for (i = 0; i < e; ++i) {
        printf("%d -- %d == %d\n", result[i].src, result[i].dest, result[i].weight);
        mstWeight += result[i].weight;
    }
    printf("Total weight of MST: %d\n", mstWeight);

    // Free allocated memory
    free(subsets);
}

int main() {
    int V, E;
    
    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &V, &E);

    Edge *edges = (Edge *)malloc(E * sizeof(Edge));

    printf("Enter each edge in the format: src dest weight\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d %d", &edges[i].src, &edges[i].dest, &edges[i].weight);
    }

    kruskalMST(edges, V, E);

    // Free allocated memory
    free(edges);

    return 0;
}
